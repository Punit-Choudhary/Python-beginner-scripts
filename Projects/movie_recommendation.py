# -*- coding: utf-8 -*-
"""Movie Recommendation system using cosine Similarity and tfidfVector

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uZalHxZAneiSHPC_P4UmCZ-gaZuboHE0
"""

import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""Data collection and preprocessing"""

#loading the data from csv file
data =  pd.read_csv("/content/movies.csv")

#printing the first five rows
data.head()

#shape of data
data.shape

#extracting features
selected_features = ['genres','keywords','title','cast','tagline','director']
print(selected_features)

#replacing missing values in selected features
for feature in selected_features:
  data[feature] = data[feature].fillna('')

#combining all 5 features 
combined_features = data['genres']+' '+data['keywords']+' '+data['title']+' '+data['cast']+' '+data['tagline']+' '+data['director']

print(combined_features)

#converting fetures text to vector (numerical values)
vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)
print(feature_vectors)

"""### Cosine-similarity"""

#getting score values using cosine-similarity
similarity = cosine_similarity(feature_vectors)
print(similarity)

print(similarity.shape)

# #getting movie names from user
# movie_name = input("Enter a movie Name: ")

# #creating a list with all the movie names given in the database
# list_of_all_titles =  data['title'].tolist()
# print(list_of_all_titles)

# #finding a close match for movie name given by user
# find_close_match = difflib.get_close_matches(movie_name,list_of_all_titles)
# print(find_close_match)

# close_match = find_close_match[0]
# print(close_match)

# #finding the index pf movie
# index_of_movie  =  data[data.title == close_match]['index'].values[0]
# print(index_of_movie)

# #getting a list of similar movies 
# similarity_score = list(enumerate(similarity[index_of_movie]))
# print(similarity_score)

# len(similarity_score)

# #sorting a movie based in their similarity score
# sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse=True)
# print(sorted_similar_movies)

# #print the name of similar movies based on the index
# print('Movie suggested for you :\n')
# i = 1 
# for movies in sorted_similar_movies:
#   index =  movies[0]
#   title_from_index = data[data.index ==  index ]['title'].values[0]
#   if(i<30):
#     print(i,'.',title_from_index)
#     i+=1

"""Movie  Recommendation System

"""

#getting movie names from user
movie_name = input("Enter a movie Name: ")
#creating a list with all the movie names given in the database
list_of_all_titles =  data['title'].tolist()
#finding a close match for movie name given by user
find_close_match = difflib.get_close_matches(movie_name,list_of_all_titles)
close_match = find_close_match[0]
#finding the index pf movie
index_of_movie  =  data[data.title == close_match]['index'].values[0]
#getting a list of similar movies 
similarity_score = list(enumerate(similarity[index_of_movie]))
#sorting a movie based in their similarity score
sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse=True)
#print the name of similar movies based on the index
print('Movie suggested for you :\n')
i = 1 
for movies in sorted_similar_movies:
  index =  movies[0]
  title_from_index = data[data.index ==  index ]['title'].values[0]
  if(i<=20):
    print(i,'.',title_from_index)
    i+=1

